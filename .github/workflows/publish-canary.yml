name: Publish canary package
on:
    push:
        branches-ignore:
            - master

jobs:
    publish:
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
        steps:
            - uses: actions/checkout@v2
            - name: Prepare repository
              run: git fetch --unshallow --tags
            - uses: actions/setup-node@v2
              with:
                  cache: yarn
                  node-version-file: .node-version
                  registry-url: 'https://registry.npmjs.org'
                  scope: '@datadog'
            # The `actions/setup-node` action only caches the global yarn cache.
            # We explicitly cache the `node_modules`.
            - name: Restore node_modules
              uses: actions/cache@v2
              with:
                  # We want to include the Node.js version in the key.
                  # Per the documentation,
                  # caching `node_modules` is unsafe due to changes in Node.js versions.
                  # If we track the Node.js version,
                  # it ought to miss the cache whenever the Node.js version changes.
                  key: node_modules-${{ runner.os }}-${{ hashFiles('.node-version') }}-${{ hashFiles('yarn.lock') }}
                  path: |
                      node_modules
                      **/node_modules
                  # We only go as far back as the Node.js version.
                  # We can run into issues if we restore caches from different versions.
                  # This will check the current branch as well as the parent branch.
                  restore-keys: |
                      node_modules-${{ runner.os }}-${{ hashFiles('.node-version') }}-
            - run: yarn install --prefer-offline
            - run: yarn build
            - name: Add auth credentials for lerna
              run: npm config set //registry.npmjs.org/:_authToken=${NPM_TOKEN}
              env:
                NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
            - run: yarn release:canary
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
