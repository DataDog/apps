!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.DD_SDK=t():e.DD_SDK=t()}(self,(function(){return e={145:e=>{self,e.exports=(()=>{"use strict";var e={573:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChildClient=void 0;const s=i(601),n=i(473),r=i(416);class o extends r.SharedClient{constructor(e={}){super(e),this.context=e.context||null,this.initListener=this.initListener.bind(this),window.addEventListener("message",this.initListener),this.profile&&this.onRequest(s.REQUEST_KEY_GET_PROFILE,(()=>this.profiler.getEvents()))}getLogger(){return n.getLogger("child-client",this.debug)}onChannelInit(e){window.removeEventListener("message",this.initListener),this.messagePort=e.ports[0];const t=this.getInitMessage(this.context);this.messagePort.postMessage(t),this.profiler.logEvent(s.ProfileEventType.POST_MESSAGE,t)}destroy(){this.messagePort&&this.messagePort.close(),window.removeEventListener("message",this.initListener)}}t.ChildClient=o},601:(e,t)=>{var i,s,n;Object.defineProperty(t,"__esModule",{value:!0}),t.REQUEST_KEY_GET_PROFILE=t.REQUEST_TIMEOUT=t.TransactionDirection=t.ProfileEventType=t.MessageAPIVersion=t.MessageType=void 0,(n=t.MessageType||(t.MessageType={})).CHANNEL_INIT="channel_init",n.EVENT="event",n.REQUEST="request",n.RESPONSE="response",(t.MessageAPIVersion||(t.MessageAPIVersion={})).v1="framepost/v1",(s=t.ProfileEventType||(t.ProfileEventType={})).POST_MESSAGE="post_message",s.RECEIVE_MESSAGE="receive_message",(i=t.TransactionDirection||(t.TransactionDirection={})).UP="up",i.DOWN="down",t.REQUEST_TIMEOUT=1e4,t.REQUEST_KEY_GET_PROFILE="framepost_get_profile"},607:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),n=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||s(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),t.ParentClient=t.ChildClient=void 0;var r=i(573);Object.defineProperty(t,"ChildClient",{enumerable:!0,get:function(){return r.ChildClient}});var o=i(166);Object.defineProperty(t,"ParentClient",{enumerable:!0,get:function(){return o.ParentClient}}),n(i(699),t)},473:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLogger=void 0,t.getLogger=(e,t)=>t?{log:t=>console.log(`${e}: ${t}`),error:t=>console.error(`${e}: ${t}`)}:{log(){},error(){}}},166:function(e,t,i){var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{c(s.next(e))}catch(e){r(e)}}function a(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ParentClient=void 0;const n=i(601),r=i(473),o=i(416),a=i(593);class c extends o.SharedClient{constructor(e={}){super(e)}requestChannel(e,t){if(this.url=new URL(e.src),e.contentWindow){const i=new MessageChannel;this.messagePort=i.port1;const s=this.getInitMessage(t);this.messagePort.onmessage=this.initListener.bind(this),e.contentWindow.postMessage(s,this.url.origin,[i.port2]),this.profiler.logEvent(n.ProfileEventType.POST_MESSAGE,s)}}getMessageProfile(){return s(this,void 0,void 0,(function*(){const e=yield this.request(n.REQUEST_KEY_GET_PROFILE),t=this.profiler.getEvents();return a.profileMessages(t,e)}))}onChannelInit(){}getLogger(){return r.getLogger("parent-client",this.debug)}destroy(){this.messagePort&&this.messagePort.close()}}t.ParentClient=c},819:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getProfiler=void 0,t.getProfiler=e=>{const t=[];return{logEvent(i,s){e&&t.push({type:i,message:s,date:new Date})},getEvents:()=>t}}},416:function(e,t,i){var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{c(s.next(e))}catch(e){r(e)}}function a(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SharedClient=void 0;const n=i(601),r=i(819),o=i(593);t.SharedClient=class{constructor({debug:e=!1,profile:t=!1,requestTimeout:i=n.REQUEST_TIMEOUT}={}){this.debug=e,this.profile=t,this.requestTimeout=i,this.channel=o.defer(),this.eventSubscriptions={},this.responseSubscriptions={},this.requestSubscriptions={},this.logger=this.getLogger(),this.profiler=r.getProfiler(t),this.channel.promise.then((()=>{this.logger.log("Secure parent <-> child channel established")}))}send(e,t){return s(this,void 0,void 0,(function*(){return this.postMessage(n.MessageType.EVENT,e,t)}))}on(e,t){this.eventSubscriptions[e]||(this.eventSubscriptions[e]={});const i=o.randomInsecureId(8);return this.eventSubscriptions[e][i]=t,this.logger.log(`Registered handler for event "${e}"`),()=>{this.eventSubscriptions[e]=o.omit(this.eventSubscriptions[e],i),this.logger.log("Unsubscribed handler for event "+e)}}request(e,t){return s(this,void 0,void 0,(function*(){const i=yield this.postMessage(n.MessageType.REQUEST,e,t),s=()=>{this.responseSubscriptions=o.omit(this.responseSubscriptions,i.id)};return new Promise(((e,t)=>{let n;this.responseSubscriptions[i.id]=(t,i)=>{clearTimeout(n),s(),e(t)},n=setTimeout((()=>{s(),t("Request timed out")}),this.requestTimeout)}))}))}onRequest(e,t){return this.requestSubscriptions[e]=(i,r)=>s(this,void 0,void 0,(function*(){const s=yield t(i,r);this.postMessage(n.MessageType.RESPONSE,e,s,r.id)})),()=>{this.requestSubscriptions=o.omit(this.requestSubscriptions,e)}}getContext(){return s(this,void 0,void 0,(function*(){const{context:e}=yield this.channel.promise;return e}))}messageListener(e){return s(this,void 0,void 0,(function*(){if(yield this.channel.promise,this.isValidMessage(e)){switch(e.data.type){case n.MessageType.EVENT:this.handleEvent(e);break;case n.MessageType.REQUEST:this.handleRequest(e);break;case n.MessageType.RESPONSE:this.handleResponse(e)}this.profiler.logEvent(n.ProfileEventType.RECEIVE_MESSAGE,e.data)}else this.logger.error("Invalid message format. Skipping.")}))}handleEvent(e){const t=e.data,i=this.eventSubscriptions[t.key];i&&Object.values(i).forEach((e=>e(t.data,t)))}handleRequest(e){const t=e.data,i=this.requestSubscriptions[t.key];i&&(i(t.data,t),this.logger.log("Handled request type "+t.key))}handleResponse(e){const t=e.data,i=t.requestId,s=i&&this.responseSubscriptions[i];s&&s(t.data,t)}postMessage(e,t,i,r){return s(this,void 0,void 0,(function*(){const{port:s}=yield this.channel.promise,a={type:e,apiVersion:n.MessageAPIVersion.v1,key:t,data:i,id:o.randomInsecureId(),requestId:r};return s.postMessage(a),this.profiler.logEvent(n.ProfileEventType.POST_MESSAGE,a),a}))}initListener(e){this.isInitMessage(e)?(this.profiler.logEvent(n.ProfileEventType.RECEIVE_MESSAGE,e.data),this.onChannelInit(e),this.messagePort&&(this.messagePort.onmessage=this.messageListener.bind(this)),this.resolveChannel(e)):this.logger.error("Invalid message format. Skipping.")}isValidMessage(e){const t=e.data;return t.type&&t.id&&t.apiVersion===n.MessageAPIVersion.v1}isInitMessage(e){return this.isValidMessage(e)&&e.data.type===n.MessageType.CHANNEL_INIT}resolveChannel(e){if(this.messagePort){const t={port:this.messagePort,origin:e.origin,context:e.data.data};this.channel.resolve(t)}}getInitMessage(e){return{type:n.MessageType.CHANNEL_INIT,apiVersion:n.MessageAPIVersion.v1,key:"",data:e,id:o.randomInsecureId()}}}},699:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},593:function(e,t,i){var s=this&&this.__rest||function(e,t){var i={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(i[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(s=Object.getOwnPropertySymbols(e);n<s.length;n++)t.indexOf(s[n])<0&&Object.prototype.propertyIsEnumerable.call(e,s[n])&&(i[s[n]]=e[s[n]])}return i};Object.defineProperty(t,"__esModule",{value:!0}),t.profileMessages=t.omit=t.randomInsecureId=t.defer=void 0;const n=i(601);t.defer=()=>{let e=()=>{},t=()=>{};const i=new Promise(((i,s)=>{e=i,t=s}));return{resolve:e,reject:t,promise:i}},t.randomInsecureId=(e=16)=>[...Array(e)].map((()=>(~~(36*Math.random())).toString(36))).join(""),t.omit=(e,t)=>{const i=e,n=t;return i[n],s(i,["symbol"==typeof n?n:n+""])},t.profileMessages=(e,t)=>{const i=((e,t)=>{const i={};return e.forEach((e=>{i[(e=>e.message.id)(e)]=e})),i})(e.concat(t).filter((e=>e.type===n.ProfileEventType.RECEIVE_MESSAGE))),s=[],r=({date:e,message:t})=>{const s={id:t.id,direction:n.TransactionDirection.DOWN,postTime:e,message:t},r=i[t.id];return r&&(s.receiveTime=r.date,s.duration=(r.date.getTime()-e.getTime())/1e3),s};return e.filter((e=>e.type===n.ProfileEventType.POST_MESSAGE)).forEach((e=>{const t=r(e);s.push(t)})),t.filter((e=>e.type===n.ProfileEventType.POST_MESSAGE)).forEach((e=>{const t=r(e);t.direction=n.TransactionDirection.UP,s.push(t)})),s.filter((e=>e.message.key!==n.REQUEST_KEY_GET_PROFILE)).sort(((e,t)=>e.postTime.getTime()-t.postTime.getTime()))}}},t={};return function i(s){if(t[s])return t[s].exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,i),n.exports}(607)})()},235:function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{c(s.next(e))}catch(e){r(e)}}function a(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CapabilityManager=void 0;const n=i(473);t.CapabilityManager=class{constructor(e,t){this.host=e.host,this.debug=e.debug,this.logger=n.getLogger(e),this.framePostClient=t}applyAdditionalMethods(e){const t=this.getAdditionalClientMethods(),i={};Object.entries(t).forEach((([e,t])=>{i[e]=(...e)=>s(this,void 0,void 0,(function*(){if(yield this.isEnabled())return t(...e);this.logger.error(`The ${this.type} capability must be enabled to perform this action`)}))})),Object.assign(e,i)}isEnabled(){return s(this,void 0,void 0,(function*(){const{capabilities:e}=yield this.framePostClient.getContext();return e.includes(this.type)}))}}},631:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.capabilityManagers=void 0;const s=i(601),n=i(235);class r extends n.CapabilityManager{constructor(){super(...arguments),this.type=s.UiAppCapabilityType.DASHBOARD_COG_MENU,this.events=[s.UiAppEventType.DASHBOARD_COG_MENU_CONTEXT]}getAdditionalClientMethods(){return{}}}t.capabilityManagers=[r]},934:function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{c(s.next(e))}catch(e){r(e)}}function a(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.DDClient=void 0;const n=i(145),r=i(631),o=i(601),a=i(473),c={host:o.Host.STAGE,debug:!1};t.DDClient=class{constructor(e={}){this.host=e.host||c.host,this.debug=e.debug||c.debug,this.framePostClient=new n.ChildClient({debug:this.debug,profile:this.debug,context:{sdkVersion:o.SDK_VERSION}}),this.logger=a.getLogger(e),this.capabilityManagers=r.capabilityManagers.map((e=>new e({host:this.host,debug:this.debug},this.framePostClient))),this.capabilityManagers.forEach((e=>e.applyAdditionalMethods(this)))}on(e,t){const i=this.getManagerByEventType(e);return i?this.framePostClient.on(e,((...n)=>s(this,void 0,void 0,(function*(){(yield i.isEnabled())?t(...n):this.logger.error(`The ${i.type} capability must be enabled to respond to events of type ${e}.`)})))):(this.logger.error("Unknown event type"),()=>{})}getContext(){return s(this,void 0,void 0,(function*(){return this.framePostClient.getContext()}))}getManagerByType(e){return this.capabilityManagers.find((t=>t.type===e))}getManagerByEventType(e){return this.capabilityManagers.find((t=>t.events.includes(e)))}}},601:(e,t)=>{"use strict";var i,s;Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=t.UiAppEventType=t.UiAppCapabilityType=t.Host=void 0,(s=t.Host||(t.Host={})).PROD="https://app.datadoghq.com/",s.STAGE="https://dd.datad0g.com/",(i=t.UiAppCapabilityType||(t.UiAppCapabilityType={})).APP_CONTEXT="app_context",i.DASHBOARD_COG_MENU="dashboard_cog_menu",(t.UiAppEventType||(t.UiAppEventType={})).DASHBOARD_COG_MENU_CONTEXT="dashboard_cog_menu_context",t.SDK_VERSION="0.1.0"},607:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=void 0;const s=i(934);let n;t.init=(e,t)=>(n||(n=new s.DDClient(e)),t&&n.getContext().then(t),n)},473:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLogger=void 0,t.getLogger=e=>e.debug?{log:e=>console.log("dd-apps: "+e),error:e=>console.error("dd-apps: "+e)}:{log(){},error(){}}}},t={},function i(s){if(t[s])return t[s].exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,i),n.exports}(607);var e,t}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,