!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.DD_SDK=t():e.DD_SDK=t()}(window,(function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=t.UiAppEventType=t.UiAppCapabilityType=t.Host=void 0,function(e){e.PROD="https://app.datadoghq.com/",e.STAGE="https://dd.datad0g.com/"}(t.Host||(t.Host={})),function(e){e.APP_CONTEXT="app_context",e.DASHBOARD_COG_MENU="dashboard_cog_menu"}(t.UiAppCapabilityType||(t.UiAppCapabilityType={})),function(e){e.DASHBOARD_COG_MENU_CONTEXT="dashboard_cog_menu_context"}(t.UiAppEventType||(t.UiAppEventType={})),t.SDK_VERSION="0.1.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLogger=void 0,t.getLogger=e=>e.debug?{log:e=>console.log("dd-apps: "+e),error:e=>console.error("dd-apps: "+e)}:{log(){},error(){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=void 0;const i=n(3);let r;t.init=(e,t)=>(r||(r=new i.DDClient(e)),t&&r.getContext().then(t),r)},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.DDClient=void 0;const r=n(4),o=n(5),s=n(0),a=n(1),c={host:s.Host.STAGE,profile:!1,debug:!1};t.DDClient=class{constructor(e={}){this.host=e.host||c.host,this.debug=e.debug||c.debug,this.profile=e.profile||c.profile,this.framePostClient=new r.ChildClient({debug:this.debug,profile:this.profile,parentContext:{sdkVersion:s.SDK_VERSION}}),this.logger=a.getLogger(e),this.capabilityManagers=o.capabilityManagers.map(e=>new e({host:this.host,debug:this.debug,profile:this.profile},this.framePostClient)),this.capabilityManagers.forEach(e=>e.applyAdditionalMethods(this))}on(e,t){const n=this.getManagerByEventType(e);if(!n)return this.logger.error("Unknown event type"),()=>{};return this.framePostClient.on(e,(...r)=>i(this,void 0,void 0,(function*(){(yield n.isEnabled())?t(...r):this.logger.error(`The ${n.type} capability must be enabled to respond to events of type ${e}.`)})))}getContext(){return i(this,void 0,void 0,(function*(){return this.framePostClient.getContext()}))}getManagerByType(e){return this.capabilityManagers.find(t=>t.type===e)}getManagerByEventType(e){return this.capabilityManagers.find(t=>t.events.includes(e))}}},function(e,t,n){window,e.exports=function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.REQUEST_KEY_GET_PROFILE=t.REQUEST_TIMEOUT=t.TransactionDirection=t.ProfileEventType=t.MessageAPIVersion=t.MessageType=void 0,function(e){e.CHANNEL_INIT="channel_init",e.EVENT="event",e.REQUEST="request",e.RESPONSE="response"}(t.MessageType||(t.MessageType={})),function(e){e.v1="framepost/v1"}(t.MessageAPIVersion||(t.MessageAPIVersion={})),function(e){e.POST_MESSAGE="post_message",e.RECEIVE_MESSAGE="receive_message"}(t.ProfileEventType||(t.ProfileEventType={})),function(e){e.UP="up",e.DOWN="down"}(t.TransactionDirection||(t.TransactionDirection={})),t.REQUEST_TIMEOUT=1e4,t.REQUEST_KEY_GET_PROFILE="framepost_get_profile"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLogger=void 0,t.getLogger=(e,t)=>t?{log:t=>console.log(`${e}: ${t}`),error:t=>console.error(`${e}: ${t}`)}:{log(){},error(){}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SharedClient=void 0;const r=n(0),o=n(6),s=n(3);t.SharedClient=class{constructor({debug:e=!1,profile:t=!1}={}){this.debug=e,this.profile=t,this.channel=s.defer(),this.eventSubscriptions={},this.responseSubscriptions={},this.requestSubscriptions={},this.logger=this.getLogger(),this.profiler=o.getProfiler(t),this.messageListener=this.messageListener.bind(this),window.addEventListener("message",this.messageListener),this.logger.log("Client initialized. Listening for messages"),this.channel.promise.then(()=>{this.logger.log("Secure parent <-> child channel established")})}send(e,t){return i(this,void 0,void 0,(function*(){return this.postMessage(r.MessageType.EVENT,e,t)}))}on(e,t){this.eventSubscriptions[e]||(this.eventSubscriptions[e]={});const n=s.randomInsecureId(8);return this.eventSubscriptions[e][n]=t,this.logger.log(`Registered handler for event "${e}"`),()=>{this.eventSubscriptions[e]=s.omit(this.eventSubscriptions[e],n),this.logger.log("Unsubscribed handler for event "+e)}}request(e,t){return i(this,void 0,void 0,(function*(){const n=yield this.postMessage(r.MessageType.REQUEST,e,t),i=()=>{this.responseSubscriptions=s.omit(this.responseSubscriptions,n.id)};return new Promise((e,t)=>{let o;this.responseSubscriptions[n.id]=(t,n)=>{clearTimeout(o),i(),e(t)},o=setTimeout(()=>{i(),t("Request timed out")},r.REQUEST_TIMEOUT)})}))}onRequest(e,t){return this.requestSubscriptions[e]=(n,o)=>i(this,void 0,void 0,(function*(){const i=yield t(n,o);this.postMessage(r.MessageType.RESPONSE,e,i,o.id)})),()=>{this.requestSubscriptions=s.omit(this.requestSubscriptions,e)}}getContext(){return i(this,void 0,void 0,(function*(){const{context:e}=yield this.channel.promise;return e}))}destroy(){window.removeEventListener("message",this.messageListener)}messageListener(e){return i(this,void 0,void 0,(function*(){const t=this.isValidMessage(e);if(t&&e.data.type===r.MessageType.CHANNEL_INIT)return this.establishChannel(e),void this.profiler.logEvent(r.ProfileEventType.RECEIVE_MESSAGE,e.data);if(yield this.isFromSource(e))if(t){switch(e.data.type){case r.MessageType.EVENT:this.handleEvent(e);break;case r.MessageType.REQUEST:this.handleRequest(e);break;case r.MessageType.RESPONSE:this.handleResponse(e)}this.profiler.logEvent(r.ProfileEventType.RECEIVE_MESSAGE,e.data)}else this.logger.error("Invalid message format. Skipping.")}))}handleEvent(e){const t=e.data,n=this.eventSubscriptions[t.key];n&&Object.values(n).forEach(e=>e(t.data,t))}handleRequest(e){const t=e.data,n=this.requestSubscriptions[t.key];n&&(n(t.data,t),this.logger.log("Handled request type "+t.key))}handleResponse(e){const t=e.data,n=t.requestId,i=n&&this.responseSubscriptions[n];i&&i(t.data,t)}postMessage(e,t,n,o){return i(this,void 0,void 0,(function*(){const{source:i,origin:a}=yield this.channel.promise,c={type:e,apiVersion:r.MessageAPIVersion.v1,key:t,data:n,id:s.randomInsecureId(),requestId:o};return i.postMessage(c,a),this.profiler.logEvent(r.ProfileEventType.POST_MESSAGE,c),c}))}isFromSource(e){return i(this,void 0,void 0,(function*(){const{source:t}=yield this.channel.promise;return e.source===t}))}isValidMessage(e){const t=e.data;return t.type&&t.id&&t.apiVersion===r.MessageAPIVersion.v1}}},function(e,t,n){"use strict";var i=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.profileMessages=t.omit=t.randomInsecureId=t.defer=void 0;const r=n(0);t.defer=()=>{let e=()=>{},t=()=>{};const n=new Promise((n,i)=>{e=n,t=i});return{resolve:e,reject:t,promise:n}},t.randomInsecureId=(e=16)=>[...Array(e)].map(()=>(~~(36*Math.random())).toString(36)).join(""),t.omit=(e,t)=>{const n=e,r=t;return n[r],i(n,["symbol"==typeof r?r:r+""])},t.profileMessages=(e,t)=>{const n=((e,t)=>{const n={};return e.forEach(e=>{n[(e=>e.message.id)(e)]=e}),n})(e.concat(t).filter(e=>e.type===r.ProfileEventType.RECEIVE_MESSAGE)),i=[],o=({date:e,message:t})=>{const i={id:t.id,direction:r.TransactionDirection.DOWN,postTime:e,message:t},o=n[t.id];return o&&(i.receiveTime=o.date,i.duration=(o.date.getTime()-e.getTime())/1e3),i};return e.filter(e=>e.type===r.ProfileEventType.POST_MESSAGE).forEach(e=>{const t=o(e);i.push(t)}),t.filter(e=>e.type===r.ProfileEventType.POST_MESSAGE).forEach(e=>{const t=o(e);t.direction=r.TransactionDirection.UP,i.push(t)}),i.filter(e=>e.message.key!==r.REQUEST_KEY_GET_PROFILE).sort((e,t)=>e.postTime.getTime()-t.postTime.getTime())}},function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.ParentClient=t.ChildClient=void 0;var o=n(5);Object.defineProperty(t,"ChildClient",{enumerable:!0,get:function(){return o.ChildClient}});var s=n(7);Object.defineProperty(t,"ParentClient",{enumerable:!0,get:function(){return s.ParentClient}}),r(n(8),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChildClient=void 0;const i=n(0),r=n(1),o=n(2);class s extends o.SharedClient{constructor(e){super(e),this.parentContext=e.parentContext||null,this.profile&&this.onRequest(i.REQUEST_KEY_GET_PROFILE,()=>this.profiler.getEvents())}getLogger(){return r.getLogger("child-client",this.debug)}establishChannel(e){const t={source:e.source,origin:e.origin,context:e.data.data};this.channel.resolve(t),this.postMessage(i.MessageType.CHANNEL_INIT,"",this.parentContext)}}t.ChildClient=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getProfiler=void 0,t.getProfiler=e=>{const t=[];return{logEvent(n,i){e&&t.push({type:n,message:i,date:new Date})},getEvents:()=>t}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ParentClient=void 0;const r=n(0),o=n(1),s=n(2),a=n(3);class c extends s.SharedClient{constructor(e){super(e)}requestChannel(e,t){if(this.frame=e,this.url=new URL(e.src),e.contentWindow){const n={type:r.MessageType.CHANNEL_INIT,apiVersion:r.MessageAPIVersion.v1,key:"",data:t,id:a.randomInsecureId()};e.contentWindow.postMessage(n,this.url.origin),this.profiler.logEvent(r.ProfileEventType.POST_MESSAGE,n)}}getMessageProfile(){return i(this,void 0,void 0,(function*(){const e=yield this.request(r.REQUEST_KEY_GET_PROFILE),t=this.profiler.getEvents();return a.profileMessages(t,e)}))}establishChannel(e){if(this.frame&&e.source===this.frame.contentWindow){const t={source:e.source,origin:e.origin,context:e.data.data};this.channel.resolve(t)}}getLogger(){return o.getLogger("parent-client",this.debug)}}t.ParentClient=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.capabilityManagers=void 0;const i=n(0),r=n(6);class o extends r.CapabilityManager{constructor(){super(...arguments),this.type=i.UiAppCapabilityType.DASHBOARD_COG_MENU,this.events=[i.UiAppEventType.DASHBOARD_COG_MENU_CONTEXT]}getAdditionalClientMethods(){return{}}}t.capabilityManagers=[o]},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CapabilityManager=void 0;const r=n(1);t.CapabilityManager=class{constructor(e,t){this.host=e.host,this.debug=e.debug,this.logger=r.getLogger(e),this.framePostClient=t}applyAdditionalMethods(e){const t=this.getAdditionalClientMethods(),n={};Object.entries(t).forEach(([e,t])=>{n[e]=(...e)=>i(this,void 0,void 0,(function*(){if(yield this.isEnabled())return t(...e);this.logger.error(`The ${this.type} capability must be enabled to perform this action`)}))}),Object.assign(e,n)}isEnabled(){return i(this,void 0,void 0,(function*(){const{capabilities:e}=yield this.framePostClient.getContext();return e.includes(this.type)}))}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,