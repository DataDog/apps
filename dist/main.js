!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.DDClient=t():e.DDClient=t()}(window,(function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UiAppEventType=t.UiAppCapabilityType=t.Host=void 0,function(e){e.PROD="https://app.datadoghq.com/",e.STAGE="https://dd.datad0g.com/"}(t.Host||(t.Host={})),function(e){e.APP_CONTEXT="app_context",e.DASHBOARD_COG_MENU="dashboard_cog_menu"}(t.UiAppCapabilityType||(t.UiAppCapabilityType={})),function(e){e.APP_CONTEXT="app_context",e.DASHBOARD_COG_MENU_CONTEXT="dashboard_cog_menu_context"}(t.UiAppEventType||(t.UiAppEventType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLogger=void 0,t.getLogger=e=>e.debug?{log:e=>console.log("dd-apps: "+e),error:e=>console.error("dd-apps: "+e)}:{log(){},error(){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uniqueInt=t.defer=void 0,t.defer=()=>{let e=()=>{},t=()=>{};const n=new Promise((n,i)=>{e=n,t=i});return{resolve:e,reject:t,promise:n}};let i=0;t.uniqueInt=()=>(i++,i)},function(e,t,n){"use strict";const i=n(4);e.exports=i.DDClient},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{d(i.next(e))}catch(e){o(e)}}function s(e){try{d(i.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((i=i.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DDClient=void 0;const o=r(n(5)),a=n(6),s=n(0),d=n(1),c=n(2),u={host:s.Host.STAGE,debug:!1};t.DDClient=class{constructor(e={}){this.host=e.host||u.host,this.debug=e.debug||u.debug,this.context=c.defer(),this.logger=d.getLogger(e),o.default.debug=this._debug,this.handshake=new o.default.Model({init:e=>this.init(e),handleEvent:e=>this.handleEvent(e)}),this.capabilityManagers=a.capabilityManagers.map(e=>new e({host:this.host,debug:this.debug},this.handshake,this.context)),this.capabilityManagers.forEach(e=>e.applyAdditionalMethods(this))}on(e,t){const n=this.getManagerByEventType(e);return n?n.subscribeHandler(e,t):(this.logger.error("Unknown event type"),()=>{})}init(e){return i(this,void 0,void 0,(function*(){yield this.handshake,this.context.resolve(e),this.logger.log("dd-apps: sdk handshake: parent <-> child handshake is complete"),this.handleEvent({eventType:s.UiAppEventType.APP_CONTEXT,data:e})}))}handleEvent({eventType:e,data:t}){return i(this,void 0,void 0,(function*(){const n=this.getManagerByEventType(e);n?n.handleEvent({eventType:e,data:t}):this.logger.error("Could not handle event: no corresponding manager found")}))}getManagerByType(e){return this.capabilityManagers.find(t=>t.type===e)}getManagerByEventType(e){return this.capabilityManagers.find(t=>t.events.includes(e))}}},function(e,t,n){"use strict";n.r(t);
/**
  postmate - A powerful, simple, promise-based postMessage library
  @version v1.5.2
  @link https://github.com/dollarshaveclub/postmate
  @author Jacob Kelley <jakie8@gmail.com>
  @license MIT
**/
var i="application/x-postmate-v1+json",r=0,o={handshake:1,"handshake-reply":1,call:1,emit:1,reply:1,request:1},a=function(e,t){return("string"!=typeof t||e.origin===t)&&(!!e.data&&(("object"!=typeof e.data||"postmate"in e.data)&&(e.data.type===i&&!!o[e.data.postmate])))},s=function(){function e(e){var t=this;this.parent=e.parent,this.frame=e.frame,this.child=e.child,this.childOrigin=e.childOrigin,this.events={},this.listener=function(e){if(!a(e,t.childOrigin))return!1;var n=((e||{}).data||{}).value||{},i=n.data,r=n.name;"emit"===e.data.postmate&&r in t.events&&t.events[r].call(t,i)},this.parent.addEventListener("message",this.listener,!1)}var t=e.prototype;return t.get=function(e){var t=this;return new c.Promise((function(n){var o=++r;t.parent.addEventListener("message",(function e(i){i.data.uid===o&&"reply"===i.data.postmate&&(t.parent.removeEventListener("message",e,!1),n(i.data.value))}),!1),t.child.postMessage({postmate:"request",type:i,property:e,uid:o},t.childOrigin)}))},t.call=function(e,t){this.child.postMessage({postmate:"call",type:i,property:e,data:t},this.childOrigin)},t.on=function(e,t){this.events[e]=t},t.destroy=function(){window.removeEventListener("message",this.listener,!1),this.frame.parentNode.removeChild(this.frame)},e}(),d=function(){function e(e){var t=this;this.model=e.model,this.parent=e.parent,this.parentOrigin=e.parentOrigin,this.child=e.child,this.child.addEventListener("message",(function(e){if(a(e,t.parentOrigin)){0;var n=e.data,r=n.property,o=n.uid,s=n.data;"call"!==e.data.postmate?function(e,t){var n="function"==typeof e[t]?e[t]():e[t];return c.Promise.resolve(n)}(t.model,r).then((function(t){return e.source.postMessage({property:r,postmate:"reply",type:i,uid:o,value:t},e.origin)})):r in t.model&&"function"==typeof t.model[r]&&t.model[r](s)}}))}return e.prototype.emit=function(e,t){this.parent.postMessage({postmate:"emit",type:i,value:{name:e,data:t}},this.parentOrigin)},e}(),c=function(){function e(e){var t=e.container,n=void 0===t?void 0!==n?n:document.body:t,i=e.model,r=e.url,o=e.name,a=e.classListArray,s=void 0===a?[]:a;return this.parent=window,this.frame=document.createElement("iframe"),this.frame.name=o||"",this.frame.classList.add.apply(this.frame.classList,s),n.appendChild(this.frame),this.child=this.frame.contentWindow||this.frame.contentDocument.parentWindow,this.model=i||{},this.sendHandshake(r)}return e.prototype.sendHandshake=function(t){var n,r=this,o=function(e){var t=document.createElement("a");t.href=e;var n=t.protocol.length>4?t.protocol:window.location.protocol,i=t.host.length?"80"===t.port||"443"===t.port?t.hostname:t.host:window.location.host;return t.origin||n+"//"+i}(t),d=0;return new e.Promise((function(e,c){r.parent.addEventListener("message",(function t(i){return!!a(i,o)&&("handshake-reply"===i.data.postmate?(clearInterval(n),r.parent.removeEventListener("message",t,!1),r.childOrigin=i.origin,e(new s(r))):c("Failed handshake"))}),!1);var u=function(){d++,r.child.postMessage({postmate:"handshake",type:i,model:r.model},o),5===d&&clearInterval(n)},p=function(){u(),n=setInterval(u,500)};r.frame.attachEvent?r.frame.attachEvent("onload",p):r.frame.onload=p,r.frame.src=t}))},e}();c.debug=!1,c.Promise=function(){try{return window?window.Promise:Promise}catch(e){return null}}(),c.Model=function(){function e(e){return this.child=window,this.model=e,this.parent=this.child.parent,this.sendHandshakeReply()}return e.prototype.sendHandshakeReply=function(){var e=this;return new c.Promise((function(t,n){e.child.addEventListener("message",(function r(o){if(o.data.postmate){if("handshake"===o.data.postmate){0,e.child.removeEventListener("message",r,!1),o.source.postMessage({postmate:"handshake-reply",type:i},o.origin),e.parentOrigin=o.origin;var a=o.data.model;return a&&Object.keys(a).forEach((function(t){e.model[t]=a[t]})),t(new d(e))}return n("Handshake Reply Failed")}}),!1)}))},e}(),t.default=c},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{d(i.next(e))}catch(e){o(e)}}function s(e){try{d(i.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.capabilityManagers=void 0;const r=n(0),o=n(7);class a extends o.CapabilityManager{constructor(){super(...arguments),this.type=r.UiAppCapabilityType.APP_CONTEXT,this.events=[r.UiAppEventType.APP_CONTEXT]}isEnabled(){return i(this,void 0,void 0,(function*(){return Promise.resolve(!0)}))}getAdditionalClientMethods(){return{}}}class s extends o.CapabilityManager{constructor(){super(...arguments),this.type=r.UiAppCapabilityType.DASHBOARD_COG_MENU,this.events=[r.UiAppEventType.DASHBOARD_COG_MENU_CONTEXT]}getAdditionalClientMethods(){return{}}}t.capabilityManagers=[a,s]},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{d(i.next(e))}catch(e){o(e)}}function s(e){try{d(i.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((i=i.apply(e,t||[])).next())}))},r=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.CapabilityManager=void 0;const o=n(0),a=n(1),s=n(2);t.CapabilityManager=class{constructor(e,t,n){this.host=e.host,this.debug=e.debug,this.logger=a.getLogger(e),this.handshake=t,this.context=n,this.subscriptions=(()=>{const e={};return Object.values(o.UiAppEventType).forEach(t=>{e[t]={}}),e})()}applyAdditionalMethods(e){const t=this.getAdditionalClientMethods(),n={};Object.entries(t).forEach(([e,t])=>{n[e]=(...e)=>i(this,void 0,void 0,(function*(){if(yield this.isEnabled())return t(...e);this.logger.error(`The ${this.type} capability must be enabled to perform this action`)}))}),Object.assign(e,n)}subscribeHandler(e,t){const n=s.uniqueInt();return this.subscriptions[e][n]=t,()=>{const t=this.subscriptions[e],i=n,o=(t[i],r(t,["symbol"==typeof i?i:i+""]));this.subscriptions[e]=o}}handleEvent({eventType:e,data:t}){return i(this,void 0,void 0,(function*(){if(!this.hasHandlers(e))return;if(yield this.isEnabled()){const n=this.subscriptions[e];Object.values(n).forEach(e=>e(t))}else this.logger.error(`The ${this.type} capability must be enabled to respond to events of type ${e}.`)}))}isEnabled(){return i(this,void 0,void 0,(function*(){const{capabilities:e}=yield this.context.promise;return e.includes(this.type)}))}hasHandlers(e){return!!Object.keys(this.subscriptions[e]).length}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,