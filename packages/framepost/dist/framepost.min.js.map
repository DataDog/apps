{"version":3,"sources":["webpack://framepost/webpack/universalModuleDefinition","webpack://framepost/./src/child.ts","webpack://framepost/./src/constants.ts","webpack://framepost/./src/index.ts","webpack://framepost/./src/logger.ts","webpack://framepost/./src/parent.ts","webpack://framepost/./src/profiler.ts","webpack://framepost/./src/shared.ts","webpack://framepost/./src/utils.ts","webpack://framepost/webpack/bootstrap","webpack://framepost/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","ChildClient","SharedClient","options","super","this","parentContext","profile","onRequest","REQUEST_KEY_GET_PROFILE","profiler","getEvents","getLogger","debug","event","channel","source","origin","context","data","resolve","postMessage","MessageType","CHANNEL_INIT","TransactionDirection","ProfileEventType","MessageAPIVersion","REQUEST_TIMEOUT","ParentClient","prefix","log","message","console","error","frame","url","URL","src","contentWindow","type","apiVersion","v1","key","id","randomInsecureId","logEvent","POST_MESSAGE","childEvents","request","events","profileMessages","getProfiler","push","date","Date","defer","eventSubscriptions","responseSubscriptions","requestSubscriptions","logger","messageListener","bind","window","addEventListener","promise","then","eventType","EVENT","handler","omit","requestKey","sentMessage","REQUEST","unsubscribeResponseHandler","Promise","reject","timer","response","clearTimeout","setTimeout","requestHandler","requestData","requestMessage","RESPONSE","removeEventListener","ev","isValidMessage","establishChannel","RECEIVE_MESSAGE","isFromSource","handleEvent","handleRequest","handleResponse","subscriptions","Object","values","forEach","requestId","res","rej","len","Array","map","Math","random","toString","join","object","parentEvents","receiveEventsByMessageID","items","getId","out","item","keyBy","concat","filter","transactions","getBaseTransaction","transaction","direction","DOWN","postTime","receiveEvent","receiveTime","duration","getTime","UP","sort","a","b","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"framepost.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"framepost\"] = factory();\n\telse\n\t\troot[\"framepost\"] = factory();\n})(self, function() {\nreturn ","import { MessageType, REQUEST_KEY_GET_PROFILE } from './constants';\nimport { getLogger } from './logger';\nimport { SharedClient, SharedClientOptions } from './shared';\nimport type { Message, Channel } from './types';\n\nexport interface ChildClientOptions extends SharedClientOptions {\n    parentContext?: any;\n}\n\nexport class ChildClient<C = any> extends SharedClient<C> {\n    parentContext: any;\n\n    constructor(options: ChildClientOptions) {\n        super(options);\n\n        this.parentContext = options.parentContext || null;\n\n        if (this.profile) {\n            this.onRequest(REQUEST_KEY_GET_PROFILE, () =>\n                this.profiler.getEvents()\n            );\n        }\n    }\n\n    protected getLogger() {\n        return getLogger('child-client', this.debug);\n    }\n\n    protected establishChannel(event: MessageEvent<Message<C>>) {\n        const channel: Channel = {\n            source: event.source as Window,\n            origin: event.origin,\n            context: event.data.data\n        };\n        this.channel.resolve(channel);\n        this.postMessage(MessageType.CHANNEL_INIT, '', this.parentContext);\n    }\n}\n","export enum MessageType {\n    CHANNEL_INIT = 'channel_init',\n    EVENT = 'event',\n    REQUEST = 'request',\n    RESPONSE = 'response'\n}\n\nexport enum MessageAPIVersion {\n    v1 = 'framepost/v1'\n}\n\nexport enum ProfileEventType {\n    POST_MESSAGE = 'post_message',\n    RECEIVE_MESSAGE = 'receive_message'\n}\n\nexport enum TransactionDirection {\n    UP = 'up',\n    DOWN = 'down'\n}\n\nexport const REQUEST_TIMEOUT = 10000;\n\nexport const REQUEST_KEY_GET_PROFILE = 'framepost_get_profile';\n","export { ChildClient } from './child';\nexport { ParentClient } from './parent';\n\nexport * from './types';\n","/* eslint-disable no-console */\nexport interface Logger {\n    log(message: string): void;\n    error(message: string): void;\n}\n\nexport const getLogger = (prefix: string, debug: boolean): Logger => {\n    if (debug) {\n        return {\n            log(message: string) {\n                return console.log(`${prefix}: ${message}`);\n            },\n            error(message: string) {\n                return console.error(`${prefix}: ${message}`);\n            }\n        };\n    } else {\n        return {\n            log() {},\n            error() {}\n        };\n    }\n};\n","import {\n    MessageType,\n    ProfileEventType,\n    REQUEST_KEY_GET_PROFILE,\n    MessageAPIVersion\n} from './constants';\nimport { getLogger } from './logger';\nimport { SharedClient, SharedClientOptions } from './shared';\nimport type {\n    Message,\n    Channel,\n    MessageProfileEvent,\n    MessageProfile\n} from './types';\nimport { randomInsecureId, profileMessages } from './utils';\n\nexport interface ParentClientOptions extends SharedClientOptions {}\n\nexport class ParentClient<C = any> extends SharedClient<C> {\n    private frame?: HTMLIFrameElement;\n    private url?: URL;\n\n    constructor(options: ParentClientOptions) {\n        super(options);\n    }\n\n    /**\n     * Request a channel with the child client. Must be called after child\n     * frame is fully loaded.\n     */\n    requestChannel<T>(frame: HTMLIFrameElement, context: T) {\n        this.frame = frame;\n        this.url = new URL(frame.src);\n\n        if (frame.contentWindow) {\n            const message: Message = {\n                type: MessageType.CHANNEL_INIT,\n                apiVersion: MessageAPIVersion.v1,\n                key: '',\n                data: context,\n                id: randomInsecureId()\n            };\n\n            frame.contentWindow.postMessage(message, this.url.origin);\n\n            this.profiler.logEvent(ProfileEventType.POST_MESSAGE, message);\n        }\n    }\n\n    async getMessageProfile(): Promise<MessageProfile[]> {\n        const childEvents = await this.request<any, MessageProfileEvent[]>(\n            REQUEST_KEY_GET_PROFILE\n        );\n        const events = this.profiler.getEvents();\n\n        return profileMessages(events, childEvents);\n    }\n\n    protected establishChannel(event: MessageEvent<Message<C>>) {\n        if (this.frame && event.source === this.frame.contentWindow) {\n            const channel: Channel<C> = {\n                source: event.source as Window,\n                origin: event.origin,\n                context: event.data.data\n            };\n\n            this.channel.resolve(channel);\n        }\n    }\n\n    protected getLogger() {\n        return getLogger('parent-client', this.debug);\n    }\n}\n","import { ProfileEventType } from './constants';\nimport type { MessageProfileEvent, Message } from './types';\n\nexport interface Profiler {\n    logEvent(type: ProfileEventType, message: Message): void;\n    getEvents(): MessageProfileEvent[];\n}\n\nexport const getProfiler = (profile: boolean): Profiler => {\n    const events: MessageProfileEvent[] = [];\n\n    return {\n        logEvent(type: ProfileEventType, message: Message) {\n            if (profile) {\n                events.push({\n                    type,\n                    message,\n                    date: new Date()\n                });\n            }\n        },\n        getEvents() {\n            return events;\n        }\n    };\n};\n","import {\n    MessageType,\n    ProfileEventType,\n    REQUEST_TIMEOUT,\n    MessageAPIVersion\n} from './constants';\nimport { Logger } from './logger';\nimport { Profiler, getProfiler } from './profiler';\nimport type {\n    Deferred,\n    Message,\n    Channel,\n    EventHandler,\n    RequestHandler\n} from './types';\nimport { defer, randomInsecureId, omit } from './utils';\n\nexport interface SharedClientOptions {\n    debug?: boolean;\n    profile?: boolean;\n}\n\nexport abstract class SharedClient<C> {\n    protected readonly debug: boolean;\n    protected readonly profile: boolean;\n    protected readonly channel: Deferred<Channel<C>>;\n    protected readonly logger: Logger;\n    protected readonly profiler: Profiler;\n    protected eventSubscriptions: {\n        [eventType: string]: { [id: string]: EventHandler };\n    };\n    protected responseSubscriptions: {\n        [id: string]: EventHandler;\n    };\n    protected requestSubscriptions: {\n        [requestKey: string]: RequestHandler;\n    };\n\n    constructor({ debug = false, profile = false }: SharedClientOptions = {}) {\n        this.debug = debug;\n        this.profile = profile;\n        this.channel = defer();\n        this.eventSubscriptions = {};\n        this.responseSubscriptions = {};\n        this.requestSubscriptions = {};\n\n        this.logger = this.getLogger();\n        this.profiler = getProfiler(profile);\n\n        this.messageListener = this.messageListener.bind(this);\n        window.addEventListener('message', this.messageListener);\n\n        this.logger.log('Client initialized. Listening for messages');\n\n        this.channel.promise.then(() => {\n            this.logger.log('Secure parent <-> child channel established');\n        });\n    }\n\n    // each client must implement these methods since they will differ slightly\n    // in parent and child\n    protected abstract establishChannel(event: MessageEvent<Message<C>>): void;\n    protected abstract getLogger(): Logger;\n\n    /**\n     * Sends an event to the opposite client\n     */\n    async send<T = any>(eventType: string, data: T): Promise<Message<T>> {\n        return this.postMessage(MessageType.EVENT, eventType, data);\n    }\n\n    /**\n     * Subscribes an event handler for the given eventType. Returns an unsubscribe hook\n     */\n    on<T = any>(eventType: string, handler: EventHandler<T>): () => void {\n        if (!this.eventSubscriptions[eventType]) {\n            this.eventSubscriptions[eventType] = {};\n        }\n\n        const id = randomInsecureId(8);\n\n        this.eventSubscriptions[eventType][id] = handler;\n\n        this.logger.log(`Registered handler for event \"${eventType}\"`);\n\n        return () => {\n            this.eventSubscriptions[eventType] = omit(\n                this.eventSubscriptions[eventType],\n                id\n            );\n\n            this.logger.log(`Unsubscribed handler for event ${eventType}`);\n        };\n    }\n\n    /**\n     * Sends a request to the opposite client. There must be an accompanying request handler\n     * subscribed with `onRequest`. Resolves with the returned data or times out.\n     */\n    async request<Q = any, R = any>(requestKey: string, data?: Q): Promise<R> {\n        const sentMessage = await this.postMessage(\n            MessageType.REQUEST,\n            requestKey,\n            data\n        );\n\n        const unsubscribeResponseHandler = () => {\n            this.responseSubscriptions = omit(\n                this.responseSubscriptions,\n                sentMessage.id\n            );\n        };\n\n        return new Promise((resolve, reject) => {\n            let timer: ReturnType<typeof setTimeout>;\n\n            const responseHandler: EventHandler<R> = (\n                response: R,\n                message: Message<R>\n            ) => {\n                clearTimeout(timer);\n\n                unsubscribeResponseHandler();\n\n                resolve(response);\n            };\n\n            this.responseSubscriptions[sentMessage.id] = responseHandler;\n\n            timer = setTimeout(() => {\n                unsubscribeResponseHandler();\n                reject('Request timed out');\n            }, REQUEST_TIMEOUT);\n        });\n    }\n\n    /**\n     * Subscribes a request handler for the given request key. The return value\n     * from the subscribed handler is sent back to the opposite client. The handler may be async.\n     * Unlike event handlers, there may be only one request handler per request key. Returns\n     * an unsubscribe hook.\n     */\n    onRequest<Q = any, R = any>(\n        requestKey: string,\n        requestHandler: RequestHandler<Q, R>\n    ): () => void {\n        const requestEventHandler = async (\n            requestData: Q,\n            requestMessage: Message<Q>\n        ) => {\n            const response = await requestHandler(requestData, requestMessage);\n\n            this.postMessage(\n                MessageType.RESPONSE,\n                requestKey,\n                response,\n                requestMessage.id\n            );\n        };\n\n        this.requestSubscriptions[requestKey] = requestEventHandler;\n\n        return () => {\n            this.requestSubscriptions = omit(\n                this.requestSubscriptions,\n                requestKey\n            );\n        };\n    }\n\n    /**\n     * Returns the context provided by the opposite client.\n     */\n    async getContext(): Promise<C> {\n        const { context } = await this.channel.promise;\n        return context;\n    }\n\n    /**\n     * Detaches message listener\n     */\n    destroy() {\n        window.removeEventListener('message', this.messageListener);\n    }\n\n    protected async messageListener(ev: MessageEvent<Message>) {\n        const isValidMessage = this.isValidMessage(ev);\n\n        if (isValidMessage && ev.data.type === MessageType.CHANNEL_INIT) {\n            this.establishChannel(ev);\n\n            this.profiler.logEvent(ProfileEventType.RECEIVE_MESSAGE, ev.data);\n\n            return;\n        }\n\n        const isFromSource = await this.isFromSource(ev);\n\n        if (!isFromSource) {\n            return;\n        }\n\n        if (isValidMessage) {\n            switch (ev.data.type) {\n                case MessageType.EVENT: {\n                    this.handleEvent(ev);\n                    break;\n                }\n                case MessageType.REQUEST: {\n                    this.handleRequest(ev);\n                    break;\n                }\n                case MessageType.RESPONSE: {\n                    this.handleResponse(ev);\n                    break;\n                }\n            }\n\n            this.profiler.logEvent(ProfileEventType.RECEIVE_MESSAGE, ev.data);\n        } else {\n            this.logger.error('Invalid message format. Skipping.');\n        }\n    }\n\n    protected handleEvent<T = any>(ev: MessageEvent<Message<T>>) {\n        const message = ev.data;\n\n        const subscriptions = this.eventSubscriptions[message.key];\n\n        if (subscriptions) {\n            Object.values(subscriptions).forEach(handler =>\n                handler(message.data, message)\n            );\n        }\n    }\n\n    protected handleRequest<Q = any, R = any>(ev: MessageEvent<Message<Q>>) {\n        const message = ev.data;\n\n        const handler = this.requestSubscriptions[message.key];\n\n        if (handler) {\n            handler(message.data, message);\n\n            this.logger.log(`Handled request type ${message.key}`);\n        }\n    }\n\n    protected handleResponse<Q = any, R = any>(ev: MessageEvent<Message<Q>>) {\n        const message = ev.data;\n\n        const requestId = message.requestId;\n\n        const handler = requestId && this.responseSubscriptions[requestId];\n\n        if (handler) {\n            handler(message.data, message);\n        }\n    }\n\n    protected async postMessage<T = any>(\n        type: MessageType,\n        key: string,\n        data: T,\n        requestId?: string\n    ): Promise<Message<T>> {\n        const { source, origin } = await this.channel.promise;\n\n        const message: Message = {\n            type,\n            apiVersion: MessageAPIVersion.v1,\n            key,\n            data,\n            id: randomInsecureId(),\n            requestId\n        };\n\n        source.postMessage(message, origin);\n\n        this.profiler.logEvent(ProfileEventType.POST_MESSAGE, message);\n\n        return message;\n    }\n\n    protected async isFromSource<T = any>(\n        ev: MessageEvent<any>\n    ): Promise<boolean> {\n        const { source } = await this.channel.promise;\n\n        return ev.source === source;\n    }\n\n    protected isValidMessage(ev: MessageEvent<any>): boolean {\n        const message = ev.data;\n\n        return (\n            message.type &&\n            message.id &&\n            message.apiVersion === MessageAPIVersion.v1\n        );\n    }\n}\n","import {\n    ProfileEventType,\n    TransactionDirection,\n    REQUEST_KEY_GET_PROFILE\n} from './constants';\nimport type { Deferred, MessageProfileEvent, MessageProfile } from './types';\n\nexport const defer = <T>(): Deferred<T> => {\n    let resolve: (t: T) => void = () => {};\n    let reject: (e?: any) => void = () => {};\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n\n    return {\n        resolve,\n        reject,\n        promise\n    };\n};\n\n/* eslint-disable no-bitwise */\nexport const randomInsecureId = (len: number = 16): string =>\n    [...Array(len)].map(() => (~~(Math.random() * 36)).toString(36)).join('');\n/* eslint-enable */\n\nexport const omit = (object: any, key: string): any => {\n    const { [key]: _, ...rest } = object;\n\n    return rest;\n};\n\nconst keyBy = <T>(\n    items: T[],\n    getId: (item: T) => string\n): { [key: string]: T } => {\n    const out: { [key: string]: T } = {};\n\n    items.forEach(item => {\n        out[getId(item)] = item;\n    });\n\n    return out;\n};\n\nexport const profileMessages = (\n    parentEvents: MessageProfileEvent[],\n    childEvents: MessageProfileEvent[]\n): MessageProfile[] => {\n    const allEvents = parentEvents.concat(childEvents);\n    const receiveEvents = allEvents.filter(\n        item => item.type === ProfileEventType.RECEIVE_MESSAGE\n    );\n    const receiveEventsByMessageID = keyBy(\n        receiveEvents,\n        item => item.message.id\n    );\n\n    const transactions: MessageProfile[] = [];\n\n    const getBaseTransaction = ({\n        date,\n        message\n    }: MessageProfileEvent): MessageProfile => {\n        const transaction: MessageProfile = {\n            id: message.id,\n            direction: TransactionDirection.DOWN,\n            postTime: date,\n            message\n        };\n\n        const receiveEvent = receiveEventsByMessageID[message.id];\n\n        if (receiveEvent) {\n            transaction.receiveTime = receiveEvent.date;\n            transaction.duration =\n                (receiveEvent.date.getTime() - date.getTime()) / 1000;\n        }\n\n        return transaction;\n    };\n\n    parentEvents\n        .filter(item => item.type === ProfileEventType.POST_MESSAGE)\n        .forEach(ev => {\n            const transaction = getBaseTransaction(ev);\n\n            transactions.push(transaction);\n        });\n\n    childEvents\n        .filter(item => item.type === ProfileEventType.POST_MESSAGE)\n        .forEach(ev => {\n            const transaction = getBaseTransaction(ev);\n\n            transaction.direction = TransactionDirection.UP;\n\n            transactions.push(transaction);\n        });\n\n    return transactions\n        .filter(item => item.message.key !== REQUEST_KEY_GET_PROFILE)\n        .sort((a, b) => a.postTime.getTime() - b.postTime.getTime());\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(607);\n"],"sourceRoot":""}