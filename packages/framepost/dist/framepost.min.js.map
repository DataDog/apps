{"version":3,"sources":["webpack://framepost/webpack/universalModuleDefinition","webpack://framepost/webpack/bootstrap","webpack://framepost/./src/constants.ts","webpack://framepost/./src/logger.ts","webpack://framepost/./src/shared.ts","webpack://framepost/./src/utils.ts","webpack://framepost/./src/index.ts","webpack://framepost/./src/child.ts","webpack://framepost/./src/profiler.ts","webpack://framepost/./src/parent.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MessageType","MessageAPIVersion","ProfileEventType","TransactionDirection","REQUEST_TIMEOUT","EVENT_TYPE_GET_PROFILE","getLogger","prefix","debug","log","message","console","error","profile","this","channel","defer","eventSubscriptions","responseSubscriptions","requestSubscriptions","logger","profiler","getProfiler","messageListener","addEventListener","promise","then","eventType","data","postMessage","EVENT","handler","id","randomInsecureId","omit","requestKey","sentMessage","REQUEST","unsubscribeResponseHandler","Promise","resolve","reject","timer","response","clearTimeout","setTimeout","requestHandler","requestData","requestMessage","RESPONSE","context","removeEventListener","ev","isValidMessage","type","CHANNEL_INIT","establishChannel","isFromValidSource","handleEvent","handleRequest","handleResponse","logEvent","RECEIVE_MESSAGE","subscriptions","values","forEach","requestId","source","origin","apiVersion","v1","POST_MESSAGE","event","res","rej","len","Array","map","Math","random","toString","join","profileMessages","parentEvents","childEvents","receiveEventsByMessageID","items","getId","out","item","keyBy","concat","filter","transactions","getBaseTransaction","date","transaction","direction","DOWN","postTime","receiveEvent","receiveTime","duration","getTime","push","UP","sort","a","b","ChildClient","ParentClient","SharedClient","options","super","parentContext","onRequest","getEvents","events","Date","frame","url","URL","contentWindow","request"],"mappings":"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","file":"framepost.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"framepost\"] = factory();\n\telse\n\t\troot[\"framepost\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","export enum MessageType {\n    CHANNEL_INIT = 'channel_init',\n    EVENT = 'event',\n    REQUEST = 'request',\n    RESPONSE = 'response'\n}\n\nexport enum MessageAPIVersion {\n    v1 = 'framepost/v1'\n}\n\nexport enum ProfileEventType {\n    POST_MESSAGE = 'post_message',\n    RECEIVE_MESSAGE = 'receive_message'\n}\n\nexport enum TransactionDirection {\n    UP = 'up',\n    DOWN = 'down'\n}\n\nexport const REQUEST_TIMEOUT = 10000;\n\nexport const EVENT_TYPE_GET_PROFILE = 'framepost_get_profile';\n","/* eslint-disable no-console */\nexport interface Logger {\n    log(message: string): void;\n    error(message: string): void;\n}\n\nexport const getLogger = (prefix: string, debug: boolean): Logger => {\n    if (debug) {\n        return {\n            log(message: string) {\n                return console.log(`${prefix}: ${message}`);\n            },\n            error(message: string) {\n                return console.error(`${prefix}: ${message}`);\n            }\n        };\n    } else {\n        return {\n            log() {},\n            error() {}\n        };\n    }\n};\n","import {\n    MessageType,\n    ProfileEventType,\n    REQUEST_TIMEOUT,\n    MessageAPIVersion\n} from './constants';\nimport { Logger } from './logger';\nimport { Profiler, getProfiler } from './profiler';\nimport type {\n    Deferred,\n    Message,\n    Channel,\n    EventHandler,\n    RequestHandler\n} from './types';\nimport { defer, randomInsecureId, omit } from './utils';\n\nexport interface SharedClientOptions {\n    debug?: boolean;\n    profile?: boolean;\n}\n\nexport abstract class SharedClient<C> {\n    protected readonly debug: boolean;\n    protected readonly profile: boolean;\n    protected readonly channel: Deferred<Channel<C>>;\n    protected readonly logger: Logger;\n    protected readonly profiler: Profiler;\n    protected eventSubscriptions: {\n        [eventType: string]: { [id: string]: EventHandler };\n    };\n    protected responseSubscriptions: {\n        [id: string]: EventHandler;\n    };\n    protected requestSubscriptions: {\n        [requestKey: string]: RequestHandler;\n    };\n\n    constructor({ debug = false, profile = false }: SharedClientOptions = {}) {\n        this.debug = debug;\n        this.profile = profile;\n        this.channel = defer();\n        this.eventSubscriptions = {};\n        this.responseSubscriptions = {};\n        this.requestSubscriptions = {};\n\n        this.logger = this.getLogger();\n        this.profiler = getProfiler(profile);\n\n        this.messageListener = this.messageListener.bind(this);\n        window.addEventListener('message', this.messageListener);\n\n        this.logger.log('Client initialized. Listening for messages');\n\n        this.channel.promise.then(() => {\n            this.logger.log('Secure parent <-> child channel established');\n        });\n    }\n\n    // each client must implement these methods since they will differ slightly\n    // in parent and child\n    protected abstract establishChannel(event: MessageEvent<Message<C>>): void;\n    protected abstract getLogger(): Logger;\n\n    /**\n     * Sends an event to the opposite client\n     */\n    async send<T = any>(eventType: string, data: T): Promise<Message<T>> {\n        return this.postMessage(MessageType.EVENT, eventType, data);\n    }\n\n    /**\n     * Subscribes an event handler for the given eventType. Returns an unsubscribe hook\n     */\n    on<T = any>(eventType: string, handler: EventHandler<T>): () => void {\n        if (!this.eventSubscriptions[eventType]) {\n            this.eventSubscriptions[eventType] = {};\n        }\n\n        const id = randomInsecureId(8);\n\n        this.eventSubscriptions[eventType][id] = handler;\n\n        this.logger.log(`Registered handler for event \"${eventType}\"`);\n\n        return () => {\n            this.eventSubscriptions[eventType] = omit(\n                this.eventSubscriptions[eventType],\n                id\n            );\n\n            this.logger.log(`Unsubscribed handler for event ${eventType}`);\n        };\n    }\n\n    /**\n     * Sends a request to the opposite client. There must be an accompanying request handler\n     * subscribed with `onRequest`. Resolves with the returned data or times out.\n     */\n    async request<Q = any, R = any>(requestKey: string, data?: Q): Promise<R> {\n        const sentMessage = await this.postMessage(\n            MessageType.REQUEST,\n            requestKey,\n            data\n        );\n\n        const unsubscribeResponseHandler = () => {\n            this.responseSubscriptions = omit(\n                this.responseSubscriptions,\n                sentMessage.id\n            );\n        };\n\n        return new Promise((resolve, reject) => {\n            let timer: ReturnType<typeof setTimeout>;\n\n            const responseHandler: EventHandler<R> = (\n                response: R,\n                message: Message<R>\n            ) => {\n                clearTimeout(timer);\n\n                unsubscribeResponseHandler();\n\n                resolve(response);\n            };\n\n            this.responseSubscriptions[sentMessage.id] = responseHandler;\n\n            timer = setTimeout(() => {\n                unsubscribeResponseHandler();\n                reject('Request timed out');\n            }, REQUEST_TIMEOUT);\n        });\n    }\n\n    /**\n     * Subscribes a request handler for the given request key. The return value\n     * from the subscribed handler is sent back to the opposite client. The handler may be async.\n     * Unlike event handlers, there may be only one request handler per request key. Returns\n     * an unsubscribe hook.\n     */\n    onRequest<Q = any, R = any>(\n        requestKey: string,\n        requestHandler: RequestHandler<Q, R>\n    ): () => void {\n        const requestEventHandler = async (\n            requestData: Q,\n            requestMessage: Message<Q>\n        ) => {\n            const response = await requestHandler(requestData, requestMessage);\n\n            this.postMessage(\n                MessageType.RESPONSE,\n                requestKey,\n                response,\n                requestMessage.id\n            );\n        };\n\n        this.requestSubscriptions[requestKey] = requestEventHandler;\n\n        return () => {\n            this.requestSubscriptions = omit(\n                this.requestSubscriptions,\n                requestKey\n            );\n        };\n    }\n\n    /**\n     * Returns the context provided by the opposite client.\n     */\n    async getContext(): Promise<C> {\n        const { context } = await this.channel.promise;\n        return context;\n    }\n\n    /**\n     * Detaches message listener\n     */\n    destroy() {\n        window.removeEventListener('message', this.messageListener);\n    }\n\n    protected async messageListener(ev: MessageEvent<Message>) {\n        if (!this.isValidMessage(ev)) {\n            this.logger.error('Invalid message format. Skipping');\n\n            return;\n        }\n\n        if (ev.data.type === MessageType.CHANNEL_INIT) {\n            this.establishChannel(ev);\n\n            return;\n        }\n\n        const valid = await this.isFromValidSource(ev);\n\n        if (valid) {\n            switch (ev.data.type) {\n                case MessageType.EVENT: {\n                    this.handleEvent(ev);\n                    break;\n                }\n                case MessageType.REQUEST: {\n                    this.handleRequest(ev);\n                    break;\n                }\n                case MessageType.RESPONSE: {\n                    this.handleResponse(ev);\n                    break;\n                }\n            }\n\n            this.profiler.logEvent(ProfileEventType.RECEIVE_MESSAGE, ev.data);\n        } else {\n            this.logger.error(\n                'Received message from invalid source. Skipping.'\n            );\n        }\n    }\n\n    protected handleEvent<T = any>(ev: MessageEvent<Message<T>>) {\n        const message = ev.data;\n\n        const subscriptions = this.eventSubscriptions[message.key];\n\n        if (subscriptions) {\n            Object.values(subscriptions).forEach(handler =>\n                handler(message.data, message)\n            );\n        }\n    }\n\n    protected handleRequest<Q = any, R = any>(ev: MessageEvent<Message<Q>>) {\n        const message = ev.data;\n\n        const handler = this.requestSubscriptions[message.key];\n\n        if (handler) {\n            handler(message.data, message);\n\n            this.logger.log(`Handled request type ${message.key}`);\n        }\n    }\n\n    protected handleResponse<Q = any, R = any>(ev: MessageEvent<Message<Q>>) {\n        const message = ev.data;\n\n        const requestId = message.requestId;\n\n        const handler = requestId && this.responseSubscriptions[requestId];\n\n        if (handler) {\n            handler(message.data, message);\n        }\n    }\n\n    protected async postMessage<T = any>(\n        type: MessageType,\n        key: string,\n        data: T,\n        requestId?: string\n    ): Promise<Message<T>> {\n        const { source, origin } = await this.channel.promise;\n\n        const message: Message = {\n            type,\n            apiVersion: MessageAPIVersion.v1,\n            key,\n            data,\n            id: randomInsecureId(),\n            requestId\n        };\n\n        source.postMessage(message, origin);\n\n        this.profiler.logEvent(ProfileEventType.POST_MESSAGE, message);\n\n        return message;\n    }\n\n    protected async isFromValidSource<T = any>(\n        event: MessageEvent<any>\n    ): Promise<boolean> {\n        const { source } = await this.channel.promise;\n\n        return event.source === source;\n    }\n\n    protected isValidMessage(event: MessageEvent<any>): boolean {\n        const message = event.data;\n\n        return (\n            message.type &&\n            message.id &&\n            message.apiVersion === MessageAPIVersion.v1\n        );\n    }\n}\n","import { ProfileEventType, TransactionDirection } from './constants';\nimport type { Deferred, MessageProfileEvent, MessageProfile } from './types';\n\nexport const defer = <T>(): Deferred<T> => {\n    let resolve: (t: T) => void = () => {};\n    let reject: (e?: any) => void = () => {};\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n\n    return {\n        resolve,\n        reject,\n        promise\n    };\n};\n\n/* eslint-disable no-bitwise */\nexport const randomInsecureId = (len: number = 16): string =>\n    [...Array(len)].map(() => (~~(Math.random() * 36)).toString(36)).join('');\n/* eslint-enable */\n\nexport const omit = (object: any, key: string): any => {\n    const { [key]: _, ...rest } = object;\n\n    return rest;\n};\n\nconst keyBy = <T>(\n    items: T[],\n    getId: (item: T) => string\n): { [key: string]: T } => {\n    const out: { [key: string]: T } = {};\n\n    items.forEach(item => {\n        out[getId(item)] = item;\n    });\n\n    return out;\n};\n\nexport const profileMessages = (\n    parentEvents: MessageProfileEvent[],\n    childEvents: MessageProfileEvent[]\n): MessageProfile[] => {\n    const allEvents = parentEvents.concat(childEvents);\n    const receiveEvents = allEvents.filter(\n        item => item.type === ProfileEventType.RECEIVE_MESSAGE\n    );\n    const receiveEventsByMessageID = keyBy(\n        receiveEvents,\n        item => item.message.id\n    );\n\n    const transactions: MessageProfile[] = [];\n\n    const getBaseTransaction = ({\n        date,\n        message\n    }: MessageProfileEvent): MessageProfile => {\n        const transaction: MessageProfile = {\n            id: message.id,\n            direction: TransactionDirection.DOWN,\n            postTime: date,\n            message\n        };\n\n        const receiveEvent = receiveEventsByMessageID[message.id];\n\n        if (receiveEvent) {\n            transaction.receiveTime = receiveEvent.date;\n            transaction.duration =\n                (receiveEvent.date.getTime() - date.getTime()) / 1000;\n        }\n\n        return transaction;\n    };\n\n    parentEvents\n        .filter(item => item.type === ProfileEventType.POST_MESSAGE)\n        .forEach(ev => {\n            const transaction = getBaseTransaction(ev);\n\n            transactions.push(transaction);\n        });\n\n    childEvents\n        .filter(item => item.type === ProfileEventType.POST_MESSAGE)\n        .forEach(ev => {\n            const transaction = getBaseTransaction(ev);\n\n            transaction.direction = TransactionDirection.UP;\n\n            transactions.push(transaction);\n        });\n\n    return transactions.sort(\n        (a, b) => a.postTime.getTime() - b.postTime.getTime()\n    );\n};\n","export { ChildClient } from './child';\nexport { ParentClient } from './parent';\n","import { MessageType, EVENT_TYPE_GET_PROFILE } from './constants';\nimport { getLogger } from './logger';\nimport { SharedClient, SharedClientOptions } from './shared';\nimport type { Message, Channel } from './types';\n\nexport interface ChildClientOptions extends SharedClientOptions {\n    parentContext?: any;\n}\n\nexport class ChildClient<C = any> extends SharedClient<C> {\n    parentContext: any;\n\n    constructor(options: ChildClientOptions) {\n        super(options);\n\n        this.parentContext = options.parentContext || null;\n\n        if (this.profile) {\n            this.onRequest(EVENT_TYPE_GET_PROFILE, () =>\n                this.profiler.getEvents()\n            );\n        }\n    }\n\n    protected getLogger() {\n        return getLogger('child-client', this.debug);\n    }\n\n    protected establishChannel(event: MessageEvent<Message<C>>) {\n        const channel: Channel = {\n            source: event.source as Window,\n            origin: event.origin,\n            context: event.data.data\n        };\n        this.channel.resolve(channel);\n        this.postMessage(MessageType.CHANNEL_INIT, '', this.parentContext);\n    }\n}\n","import { ProfileEventType } from './constants';\nimport type { MessageProfileEvent, Message } from './types';\n\nexport interface Profiler {\n    logEvent(type: ProfileEventType, message: Message): void;\n    getEvents(): MessageProfileEvent[];\n}\n\nexport const getProfiler = (profile: boolean): Profiler => {\n    const events: MessageProfileEvent[] = [];\n\n    return {\n        logEvent(type: ProfileEventType, message: Message) {\n            if (profile) {\n                events.push({\n                    type,\n                    message,\n                    date: new Date()\n                });\n            }\n        },\n        getEvents() {\n            return events;\n        }\n    };\n};\n","import {\n    MessageType,\n    ProfileEventType,\n    EVENT_TYPE_GET_PROFILE,\n    MessageAPIVersion\n} from './constants';\nimport { getLogger } from './logger';\nimport { SharedClient, SharedClientOptions } from './shared';\nimport type {\n    Message,\n    Channel,\n    MessageProfileEvent,\n    MessageProfile\n} from './types';\nimport { randomInsecureId, profileMessages } from './utils';\n\nexport interface ParentClientOptions extends SharedClientOptions {}\n\nexport class ParentClient<C = any> extends SharedClient<C> {\n    private frame?: HTMLIFrameElement;\n    private url?: URL;\n\n    constructor(options: ParentClientOptions) {\n        super(options);\n    }\n\n    /**\n     * Request a channel with the child client. Must be called after child\n     * frame is fully loaded.\n     */\n    requestChannel<T>(frame: HTMLIFrameElement, url: string, context: T) {\n        this.frame = frame;\n        this.url = new URL(url);\n\n        if (frame.contentWindow) {\n            const message: Message = {\n                type: MessageType.CHANNEL_INIT,\n                apiVersion: MessageAPIVersion.v1,\n                key: '',\n                data: context,\n                id: randomInsecureId()\n            };\n\n            frame.contentWindow.postMessage(message, this.url.origin);\n\n            this.profiler.logEvent(ProfileEventType.POST_MESSAGE, message);\n        }\n    }\n\n    async getMessageProfile(): Promise<MessageProfile[]> {\n        const childEvents = await this.request<any, MessageProfileEvent[]>(\n            EVENT_TYPE_GET_PROFILE\n        );\n        const events = this.profiler.getEvents();\n\n        return profileMessages(events, childEvents);\n    }\n\n    protected establishChannel(event: MessageEvent<Message<C>>) {\n        if (this.frame && event.source === this.frame.contentWindow) {\n            const channel: Channel<C> = {\n                source: event.source as Window,\n                origin: event.origin,\n                context: event.data.data\n            };\n\n            this.channel.resolve(channel);\n        }\n    }\n\n    protected getLogger() {\n        return getLogger('parent-client', this.debug);\n    }\n}\n"],"sourceRoot":""}