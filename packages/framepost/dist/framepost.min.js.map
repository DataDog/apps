{"version":3,"sources":["webpack://framepost/webpack/universalModuleDefinition","webpack://framepost/./src/child.ts","webpack://framepost/./src/constants.ts","webpack://framepost/./src/index.ts","webpack://framepost/./src/logger.ts","webpack://framepost/./src/parent.ts","webpack://framepost/./src/profiler.ts","webpack://framepost/./src/shared.ts","webpack://framepost/./src/utils.ts","webpack://framepost/webpack/bootstrap","webpack://framepost/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","ChildClient","SharedClient","options","super","this","context","initListener","bind","window","addEventListener","profile","onRequest","REQUEST_KEY_GET_PROFILE","profiler","getEvents","getLogger","debug","ev","removeEventListener","messagePort","ports","message","getInitMessage","postMessage","logEvent","ProfileEventType","POST_MESSAGE","close","TransactionDirection","MessageType","MessageAPIVersion","REQUEST_TIMEOUT","ParentClient","prefix","log","console","error","frame","url","URL","src","contentWindow","messageChannel","MessageChannel","port1","onmessage","origin","port2","childEvents","request","events","profileMessages","getProfiler","type","push","date","Date","requestTimeout","channel","defer","eventSubscriptions","responseSubscriptions","requestSubscriptions","logger","promise","then","eventType","data","EVENT","handler","id","randomInsecureId","omit","requestKey","sentMessage","REQUEST","unsubscribeResponseHandler","Promise","resolve","reject","timer","response","clearTimeout","setTimeout","requestHandler","requestData","requestMessage","RESPONSE","isValidMessage","handleEvent","handleRequest","handleResponse","RECEIVE_MESSAGE","subscriptions","key","Object","values","forEach","requestId","port","apiVersion","v1","isInitMessage","onChannelInit","messageListener","resolveChannel","CHANNEL_INIT","res","rej","len","Array","map","Math","random","toString","join","object","parentEvents","receiveEventsByMessageID","items","getId","out","item","keyBy","concat","filter","transactions","getBaseTransaction","transaction","direction","DOWN","postTime","receiveEvent","receiveTime","duration","getTime","UP","sort","a","b","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"framepost.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"framepost\"] = factory();\n\telse\n\t\troot[\"framepost\"] = factory();\n})(self, function() {\nreturn ","import { ProfileEventType, REQUEST_KEY_GET_PROFILE } from './constants';\nimport { getLogger } from './logger';\nimport { SharedClient, SharedClientOptions } from './shared';\nimport type { Message } from './types';\n\nexport interface ChildClientOptions extends SharedClientOptions {\n    context?: any;\n}\n\nexport class ChildClient<C = any> extends SharedClient<C> {\n    context: any;\n\n    constructor(options: ChildClientOptions = {}) {\n        super(options);\n\n        this.context = options.context || null;\n\n        this.initListener = this.initListener.bind(this);\n\n        window.addEventListener('message', this.initListener);\n\n        if (this.profile) {\n            this.onRequest(REQUEST_KEY_GET_PROFILE, () =>\n                this.profiler.getEvents()\n            );\n        }\n    }\n\n    protected getLogger() {\n        return getLogger('child-client', this.debug);\n    }\n\n    protected onChannelInit(ev: MessageEvent<Message<C>>) {\n        window.removeEventListener('message', this.initListener);\n\n        this.messagePort = ev.ports[0];\n\n        const message = this.getInitMessage(this.context);\n\n        this.messagePort.postMessage(message);\n\n        this.profiler.logEvent(ProfileEventType.POST_MESSAGE, message);\n    }\n\n    destroy() {\n        if (this.messagePort) {\n            this.messagePort.close();\n        }\n\n        window.removeEventListener('message', this.initListener);\n    }\n}\n","export enum MessageType {\n    CHANNEL_INIT = 'channel_init',\n    EVENT = 'event',\n    REQUEST = 'request',\n    RESPONSE = 'response'\n}\n\nexport enum MessageAPIVersion {\n    v1 = 'framepost/v1'\n}\n\nexport enum ProfileEventType {\n    POST_MESSAGE = 'post_message',\n    RECEIVE_MESSAGE = 'receive_message'\n}\n\nexport enum TransactionDirection {\n    UP = 'up',\n    DOWN = 'down'\n}\n\nexport const REQUEST_TIMEOUT = 10000;\n\nexport const REQUEST_KEY_GET_PROFILE = 'framepost_get_profile';\n","export { ChildClient } from './child';\nexport { ParentClient } from './parent';\n\nexport * from './types';\n","/* eslint-disable no-console */\nexport interface Logger {\n    log(message: string): void;\n    error(message: string): void;\n}\n\nexport const getLogger = (prefix: string, debug: boolean): Logger => {\n    if (debug) {\n        return {\n            log(message: string) {\n                return console.log(`${prefix}: ${message}`);\n            },\n            error(message: string) {\n                return console.error(`${prefix}: ${message}`);\n            }\n        };\n    } else {\n        return {\n            log() {},\n            error() {}\n        };\n    }\n};\n","import { ProfileEventType, REQUEST_KEY_GET_PROFILE } from './constants';\nimport { getLogger } from './logger';\nimport { SharedClient, SharedClientOptions } from './shared';\nimport type { MessageProfileEvent, MessageProfile } from './types';\nimport { profileMessages } from './utils';\n\nexport interface ParentClientOptions extends SharedClientOptions {}\n\nexport class ParentClient<C = any> extends SharedClient<C> {\n    private url?: URL;\n\n    constructor(options: ParentClientOptions = {}) {\n        super(options);\n    }\n\n    /**\n     * Request a channel with the child client. Must be called after child\n     * frame is fully loaded.\n     */\n    requestChannel<T>(frame: HTMLIFrameElement, context: T) {\n        this.url = new URL(frame.src);\n\n        if (frame.contentWindow) {\n            const messageChannel = new MessageChannel();\n\n            this.messagePort = messageChannel.port1;\n\n            const message = this.getInitMessage(context);\n\n            this.messagePort.onmessage = this.initListener.bind(this);\n\n            frame.contentWindow.postMessage(message, this.url.origin, [\n                messageChannel.port2\n            ]);\n\n            this.profiler.logEvent(ProfileEventType.POST_MESSAGE, message);\n        }\n    }\n\n    async getMessageProfile(): Promise<MessageProfile[]> {\n        const childEvents = await this.request<any, MessageProfileEvent[]>(\n            REQUEST_KEY_GET_PROFILE\n        );\n        const events = this.profiler.getEvents();\n\n        return profileMessages(events, childEvents);\n    }\n\n    protected onChannelInit() {}\n\n    protected getLogger() {\n        return getLogger('parent-client', this.debug);\n    }\n\n    destroy() {\n        if (this.messagePort) {\n            this.messagePort.close();\n        }\n    }\n}\n","import { ProfileEventType } from './constants';\nimport type { MessageProfileEvent, Message } from './types';\n\nexport interface Profiler {\n    logEvent(type: ProfileEventType, message: Message): void;\n    getEvents(): MessageProfileEvent[];\n}\n\nexport const getProfiler = (profile: boolean): Profiler => {\n    const events: MessageProfileEvent[] = [];\n\n    return {\n        logEvent(type: ProfileEventType, message: Message) {\n            if (profile) {\n                events.push({\n                    type,\n                    message,\n                    date: new Date()\n                });\n            }\n        },\n        getEvents() {\n            return events;\n        }\n    };\n};\n","import {\n    MessageType,\n    ProfileEventType,\n    REQUEST_TIMEOUT,\n    MessageAPIVersion\n} from './constants';\nimport { Logger } from './logger';\nimport { Profiler, getProfiler } from './profiler';\nimport type {\n    Deferred,\n    Message,\n    Channel,\n    EventHandler,\n    RequestHandler\n} from './types';\nimport { defer, randomInsecureId, omit } from './utils';\n\nexport interface SharedClientOptions {\n    debug?: boolean;\n    profile?: boolean;\n    requestTimeout?: number;\n}\n\nexport abstract class SharedClient<C> {\n    protected readonly debug: boolean;\n    protected readonly profile: boolean;\n    protected readonly requestTimeout: number;\n    protected readonly channel: Deferred<Channel<C>>;\n    protected readonly logger: Logger;\n    protected readonly profiler: Profiler;\n    protected messagePort?: MessagePort;\n    protected eventSubscriptions: {\n        [eventType: string]: { [id: string]: EventHandler };\n    };\n    protected responseSubscriptions: {\n        [id: string]: EventHandler;\n    };\n    protected requestSubscriptions: {\n        [requestKey: string]: RequestHandler;\n    };\n\n    constructor({\n        debug = false,\n        profile = false,\n        requestTimeout = REQUEST_TIMEOUT\n    }: SharedClientOptions = {}) {\n        this.debug = debug;\n        this.profile = profile;\n        this.requestTimeout = requestTimeout;\n        this.channel = defer();\n        this.eventSubscriptions = {};\n        this.responseSubscriptions = {};\n        this.requestSubscriptions = {};\n\n        this.logger = this.getLogger();\n        this.profiler = getProfiler(profile);\n\n        this.channel.promise.then(() => {\n            this.logger.log('Secure parent <-> child channel established');\n        });\n    }\n\n    // each client must implement these methods since they will differ slightly\n    // in parent and child\n    protected abstract onChannelInit(event: MessageEvent<Message<C>>): void;\n    protected abstract getLogger(): Logger;\n    abstract destroy(): void;\n\n    /**\n     * Sends an event to the opposite client\n     */\n    async send<T = any>(eventType: string, data: T): Promise<Message<T>> {\n        return this.postMessage(MessageType.EVENT, eventType, data);\n    }\n\n    /**\n     * Subscribes an event handler for the given eventType. Returns an unsubscribe hook\n     */\n    on<T = any>(eventType: string, handler: EventHandler<T>): () => void {\n        if (!this.eventSubscriptions[eventType]) {\n            this.eventSubscriptions[eventType] = {};\n        }\n\n        const id = randomInsecureId(8);\n\n        this.eventSubscriptions[eventType][id] = handler;\n\n        this.logger.log(`Registered handler for event \"${eventType}\"`);\n\n        return () => {\n            this.eventSubscriptions[eventType] = omit(\n                this.eventSubscriptions[eventType],\n                id\n            );\n\n            this.logger.log(`Unsubscribed handler for event ${eventType}`);\n        };\n    }\n\n    /**\n     * Sends a request to the opposite client. There must be an accompanying request handler\n     * subscribed with `onRequest`. Resolves with the returned data or times out.\n     */\n    async request<Q = any, R = any>(requestKey: string, data?: Q): Promise<R> {\n        const sentMessage = await this.postMessage(\n            MessageType.REQUEST,\n            requestKey,\n            data\n        );\n\n        const unsubscribeResponseHandler = () => {\n            this.responseSubscriptions = omit(\n                this.responseSubscriptions,\n                sentMessage.id\n            );\n        };\n\n        return new Promise((resolve, reject) => {\n            let timer: ReturnType<typeof setTimeout>;\n\n            const responseHandler: EventHandler<R> = (\n                response: R,\n                message: Message<R>\n            ) => {\n                clearTimeout(timer);\n\n                unsubscribeResponseHandler();\n\n                resolve(response);\n            };\n\n            this.responseSubscriptions[sentMessage.id] = responseHandler;\n\n            timer = setTimeout(() => {\n                unsubscribeResponseHandler();\n                reject('Request timed out');\n            }, this.requestTimeout);\n        });\n    }\n\n    /**\n     * Subscribes a request handler for the given request key. The return value\n     * from the subscribed handler is sent back to the opposite client. The handler may be async.\n     * Unlike event handlers, there may be only one request handler per request key. Returns\n     * an unsubscribe hook.\n     */\n    onRequest<Q = any, R = any>(\n        requestKey: string,\n        requestHandler: RequestHandler<Q, R>\n    ): () => void {\n        const requestEventHandler = async (\n            requestData: Q,\n            requestMessage: Message<Q>\n        ) => {\n            const response = await requestHandler(requestData, requestMessage);\n\n            this.postMessage(\n                MessageType.RESPONSE,\n                requestKey,\n                response,\n                requestMessage.id\n            );\n        };\n\n        this.requestSubscriptions[requestKey] = requestEventHandler;\n\n        return () => {\n            this.requestSubscriptions = omit(\n                this.requestSubscriptions,\n                requestKey\n            );\n        };\n    }\n\n    /**\n     * Returns the context provided by the opposite client.\n     */\n    async getContext(): Promise<C> {\n        const { context } = await this.channel.promise;\n        return context;\n    }\n\n    protected async messageListener(ev: MessageEvent<Message>) {\n        await this.channel.promise;\n\n        const isValidMessage = this.isValidMessage(ev);\n\n        if (isValidMessage) {\n            switch (ev.data.type) {\n                case MessageType.EVENT: {\n                    this.handleEvent(ev);\n                    break;\n                }\n                case MessageType.REQUEST: {\n                    this.handleRequest(ev);\n                    break;\n                }\n                case MessageType.RESPONSE: {\n                    this.handleResponse(ev);\n                    break;\n                }\n            }\n\n            this.profiler.logEvent(ProfileEventType.RECEIVE_MESSAGE, ev.data);\n        } else {\n            this.logger.error('Invalid message format. Skipping.');\n        }\n    }\n\n    protected handleEvent<T = any>(ev: MessageEvent<Message<T>>) {\n        const message = ev.data;\n\n        const subscriptions = this.eventSubscriptions[message.key];\n\n        if (subscriptions) {\n            Object.values(subscriptions).forEach(handler =>\n                handler(message.data, message)\n            );\n        }\n    }\n\n    protected handleRequest<Q = any>(ev: MessageEvent<Message<Q>>) {\n        const message = ev.data;\n\n        const handler = this.requestSubscriptions[message.key];\n\n        if (handler) {\n            handler(message.data, message);\n\n            this.logger.log(`Handled request type ${message.key}`);\n        }\n    }\n\n    protected handleResponse<R = any>(ev: MessageEvent<Message<R>>) {\n        const message = ev.data;\n\n        const requestId = message.requestId;\n\n        const handler = requestId && this.responseSubscriptions[requestId];\n\n        if (handler) {\n            handler(message.data, message);\n        }\n    }\n\n    protected async postMessage<T = any>(\n        type: MessageType,\n        key: string,\n        data: T,\n        requestId?: string\n    ): Promise<Message<T>> {\n        const { port } = await this.channel.promise;\n\n        const message: Message = {\n            type,\n            apiVersion: MessageAPIVersion.v1,\n            key,\n            data,\n            id: randomInsecureId(),\n            requestId\n        };\n\n        port.postMessage(message);\n\n        this.profiler.logEvent(ProfileEventType.POST_MESSAGE, message);\n\n        return message;\n    }\n\n    protected initListener(ev: MessageEvent<Message<C>>) {\n        if (this.isInitMessage(ev)) {\n            this.profiler.logEvent(ProfileEventType.RECEIVE_MESSAGE, ev.data);\n\n            this.onChannelInit(ev);\n\n            if (this.messagePort) {\n                this.messagePort.onmessage = this.messageListener.bind(this);\n            }\n\n            this.resolveChannel(ev);\n        } else {\n            this.logger.error('Invalid message format. Skipping.');\n        }\n    }\n\n    protected isValidMessage(ev: MessageEvent<any>): boolean {\n        const message = ev.data;\n\n        return (\n            message.type &&\n            message.id &&\n            message.apiVersion === MessageAPIVersion.v1\n        );\n    }\n\n    protected isInitMessage(ev: MessageEvent<any>): boolean {\n        return (\n            this.isValidMessage(ev) && ev.data.type === MessageType.CHANNEL_INIT\n        );\n    }\n\n    protected resolveChannel(ev: MessageEvent<Message<C>>) {\n        if (this.messagePort) {\n            const channel: Channel<C> = {\n                port: this.messagePort,\n                origin: ev.origin,\n                context: ev.data.data\n            };\n\n            this.channel.resolve(channel);\n        }\n    }\n\n    protected getInitMessage<T = any>(context: T): Message<T> {\n        const message: Message<T> = {\n            type: MessageType.CHANNEL_INIT,\n            apiVersion: MessageAPIVersion.v1,\n            key: '',\n            data: context,\n            id: randomInsecureId()\n        };\n\n        return message;\n    }\n}\n","import {\n    ProfileEventType,\n    TransactionDirection,\n    REQUEST_KEY_GET_PROFILE\n} from './constants';\nimport type { Deferred, MessageProfileEvent, MessageProfile } from './types';\n\nexport const defer = <T>(): Deferred<T> => {\n    let resolve: (t: T) => void = () => {};\n    let reject: (e?: any) => void = () => {};\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n\n    return {\n        resolve,\n        reject,\n        promise\n    };\n};\n\n/* eslint-disable no-bitwise */\nexport const randomInsecureId = (len: number = 16): string =>\n    [...Array(len)].map(() => (~~(Math.random() * 36)).toString(36)).join('');\n/* eslint-enable */\n\nexport const omit = (object: any, key: string): any => {\n    const { [key]: _, ...rest } = object;\n\n    return rest;\n};\n\nconst keyBy = <T>(\n    items: T[],\n    getId: (item: T) => string\n): { [key: string]: T } => {\n    const out: { [key: string]: T } = {};\n\n    items.forEach(item => {\n        out[getId(item)] = item;\n    });\n\n    return out;\n};\n\nexport const profileMessages = (\n    parentEvents: MessageProfileEvent[],\n    childEvents: MessageProfileEvent[]\n): MessageProfile[] => {\n    const allEvents = parentEvents.concat(childEvents);\n    const receiveEvents = allEvents.filter(\n        item => item.type === ProfileEventType.RECEIVE_MESSAGE\n    );\n    const receiveEventsByMessageID = keyBy(\n        receiveEvents,\n        item => item.message.id\n    );\n\n    const transactions: MessageProfile[] = [];\n\n    const getBaseTransaction = ({\n        date,\n        message\n    }: MessageProfileEvent): MessageProfile => {\n        const transaction: MessageProfile = {\n            id: message.id,\n            direction: TransactionDirection.DOWN,\n            postTime: date,\n            message\n        };\n\n        const receiveEvent = receiveEventsByMessageID[message.id];\n\n        if (receiveEvent) {\n            transaction.receiveTime = receiveEvent.date;\n            transaction.duration =\n                (receiveEvent.date.getTime() - date.getTime()) / 1000;\n        }\n\n        return transaction;\n    };\n\n    parentEvents\n        .filter(item => item.type === ProfileEventType.POST_MESSAGE)\n        .forEach(ev => {\n            const transaction = getBaseTransaction(ev);\n\n            transactions.push(transaction);\n        });\n\n    childEvents\n        .filter(item => item.type === ProfileEventType.POST_MESSAGE)\n        .forEach(ev => {\n            const transaction = getBaseTransaction(ev);\n\n            transaction.direction = TransactionDirection.UP;\n\n            transactions.push(transaction);\n        });\n\n    return transactions\n        .filter(item => item.message.key !== REQUEST_KEY_GET_PROFILE)\n        .sort((a, b) => a.postTime.getTime() - b.postTime.getTime());\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(607);\n"],"sourceRoot":""}